(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{371:function(e,s,a){"use strict";a.r(s);var t=a(0),n=Object(t.a)({},(function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"terminology"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#terminology"}},[e._v("#")]),e._v(" Terminology")]),e._v(" "),a("h3",{attrs:{id:"rule-declaration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rule-declaration"}},[e._v("#")]),e._v(" Rule declaration")]),e._v(" "),a("p",[e._v("A “rule declaration” is the name given to a selector (or a group of  selectors) with an accompanying group of properties. Here's an example:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(".listing {\n  font-size: 18px;\n  line-height: 1.2;\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("h3",{attrs:{id:"selctors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#selctors"}},[e._v("#")]),e._v(" Selctors")]),e._v(" "),a("p",[e._v("In a rule declaration, “selectors” are the bits that determine which  elements in the DOM tree will be styled by the defined properties.  Selectors can match HTML elements, as well as an element's class, ID, or any of its attributes. Here are some examples of selectors:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(".my-element-class {\n  /* ... */\n}\n\n[aria-hidden] {\n  /* ... */\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br")])]),a("h3",{attrs:{id:""}},[a("a",{staticClass:"header-anchor",attrs:{href:"#"}},[e._v("#")])]),e._v(" "),a("h3",{attrs:{id:"properties"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#properties"}},[e._v("#")]),e._v(" Properties")]),e._v(" "),a("p",[e._v("Finally, properties are what give the selected elements of a rule  declaration their style. Properties are key-value pairs, and a rule  declaration can contain one or more property declarations. Property  declarations look like this:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("/* some selector */ {\n  background: #f1f1f1;\n  color: #333;\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("p",[e._v("​")]),e._v(" "),a("h2",{attrs:{id:"css"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#css"}},[e._v("#")]),e._v(" CSS")]),e._v(" "),a("h3",{attrs:{id:"-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#-2"}},[e._v("#")])]),e._v(" "),a("h3",{attrs:{id:"formatting"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#formatting"}},[e._v("#")]),e._v(" Formatting")]),e._v(" "),a("ul",[a("li",[e._v("Use soft tabs (2 spaces) for indentation.")]),e._v(" "),a("li",[e._v("Prefer dashes over camelCasing in class names.\n"),a("ul",[a("li",[e._v("Underscores and PascalCasing are okay if you are using BEM (see "),a("a",{attrs:{href:"https://github.com/airbnb/css#oocss-and-bem",target:"_blank",rel:"noopener noreferrer"}},[e._v("OOCSS and BEM"),a("OutboundLink")],1),e._v(" below).")])])]),e._v(" "),a("li",[e._v("Do not use ID selectors.")]),e._v(" "),a("li",[e._v("When using multiple selectors in a rule declaration, give each selector its own line.")]),e._v(" "),a("li",[e._v("Put a space before the opening brace "),a("code",[e._v("{")]),e._v(" in rule declarations.")]),e._v(" "),a("li",[e._v("In properties, put a space after, but not before, the "),a("code",[e._v(":")]),e._v(" character.")]),e._v(" "),a("li",[e._v("Put closing braces "),a("code",[e._v("}")]),e._v(" of rule declarations on a new line.")]),e._v(" "),a("li",[e._v("Put blank lines between rule declarations.")])]),e._v(" "),a("p",[a("strong",[e._v("Bad")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(".avatar{\n    border-radius:50%;\n    border:2px solid white; }\n.no, .nope, .not_good {\n    // ...\n}\n#lol-no {\n  // ...\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br")])]),a("p",[a("strong",[e._v("Good")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(".avatar {\n  border-radius: 50%;\n  border: 2px solid white;\n}\n\n.one,\n.selector,\n.per-line {\n  // ...\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br")])]),a("h3",{attrs:{id:"-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#-3"}},[e._v("#")])]),e._v(" "),a("h3",{attrs:{id:"comments"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#comments"}},[e._v("#")]),e._v(" Comments")]),e._v(" "),a("ul",[a("li",[e._v("Prefer line comments ("),a("code",[e._v("//")]),e._v(" in Sass-land) to block comments.")]),e._v(" "),a("li",[e._v("Prefer comments on their own line. Avoid end-of-line comments.")]),e._v(" "),a("li",[e._v("Write detailed comments for code that isn't self-documenting:\n"),a("ul",[a("li",[e._v("Uses of z-index")]),e._v(" "),a("li",[e._v("Compatibility or browser-specific hacks")])])])]),e._v(" "),a("h3",{attrs:{id:"-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#-4"}},[e._v("#")])]),e._v(" "),a("h3",{attrs:{id:"oocss-and-bem"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#oocss-and-bem"}},[e._v("#")]),e._v(" OOCSS and BEM")]),e._v(" "),a("p",[e._v("We encourage some combination of OOCSS and BEM for these reasons:")]),e._v(" "),a("ul",[a("li",[e._v("It helps create clear, strict relationships between CSS and HTML")]),e._v(" "),a("li",[e._v("It helps us create reusable, composable components")]),e._v(" "),a("li",[e._v("It allows for less nesting and lower specificity")]),e._v(" "),a("li",[e._v("It helps in building scalable stylesheets")])]),e._v(" "),a("p",[a("strong",[e._v("OOCSS")]),e._v(", or “Object Oriented CSS”, is an approach for  writing CSS that encourages you to think about your stylesheets as a  collection of “objects”: reusable, repeatable snippets that can be used  independently throughout a website.")]),e._v(" "),a("ul",[a("li",[e._v("Nicole Sullivan's "),a("a",{attrs:{href:"https://github.com/stubbornella/oocss/wiki",target:"_blank",rel:"noopener noreferrer"}},[e._v("OOCSS wiki"),a("OutboundLink")],1)]),e._v(" "),a("li",[e._v("Smashing Magazine's "),a("a",{attrs:{href:"http://www.smashingmagazine.com/2011/12/12/an-introduction-to-object-oriented-css-oocss/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Introduction to OOCSS"),a("OutboundLink")],1)])]),e._v(" "),a("p",[a("strong",[e._v("BEM")]),e._v(", or “Block-Element-Modifier”, is a "),a("em",[e._v("naming convention")]),e._v(" for classes in HTML and CSS. It was originally developed by Yandex with large codebases and scalability in mind, and can serve as a solid set  of guidelines for implementing OOCSS.")]),e._v(" "),a("ul",[a("li",[e._v("CSS Trick's "),a("a",{attrs:{href:"https://css-tricks.com/bem-101/",target:"_blank",rel:"noopener noreferrer"}},[e._v("BEM 101"),a("OutboundLink")],1)]),e._v(" "),a("li",[e._v("Harry Roberts' "),a("a",{attrs:{href:"http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/",target:"_blank",rel:"noopener noreferrer"}},[e._v("introduction to BEM"),a("OutboundLink")],1)])]),e._v(" "),a("p",[e._v("We recommend a variant of BEM with PascalCased “blocks”, which works  particularly well when combined with components (e.g. React).  Underscores and dashes are still used for modifiers and children.")]),e._v(" "),a("p",[a("strong",[e._v("Example")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// ListingCard.jsx\nfunction ListingCard() {\n  return (\n    <article class="ListingCard ListingCard--featured">\n\n      <h1 class="ListingCard__title">Adorable 2BR in the sunny Mission</h1>\n\n      <div class="ListingCard__content">\n        <p>Vestibulum id ligula porta felis euismod semper.</p>\n      </div>\n\n    </article>\n  );\n}\n/* ListingCard.css */\n.ListingCard { }\n.ListingCard--featured { }\n.ListingCard__title { }\n.ListingCard__content { }\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br"),a("span",{staticClass:"line-number"},[e._v("19")]),a("br")])]),a("ul",[a("li",[a("code",[e._v(".ListingCard")]),e._v(" is the “block” and represents the higher-level component")]),e._v(" "),a("li",[a("code",[e._v(".ListingCard__title")]),e._v(" is an “element” and represents a descendant of "),a("code",[e._v(".ListingCard")]),e._v(" that helps compose the block as a whole.")]),e._v(" "),a("li",[a("code",[e._v(".ListingCard--featured")]),e._v(" is a “modifier” and represents a different state or variation on the "),a("code",[e._v(".ListingCard")]),e._v(" block.")])]),e._v(" "),a("h3",{attrs:{id:"-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#-5"}},[e._v("#")])]),e._v(" "),a("h3",{attrs:{id:"id-selectors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#id-selectors"}},[e._v("#")]),e._v(" ID selectors")]),e._v(" "),a("p",[e._v("While it is possible to select elements by ID in CSS, it should  generally be considered an anti-pattern. ID selectors introduce an  unnecessarily high level of "),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity",target:"_blank",rel:"noopener noreferrer"}},[e._v("specificity"),a("OutboundLink")],1),e._v(" to your rule declarations, and they are not reusable.")]),e._v(" "),a("p",[e._v("For more on this subject, read "),a("a",{attrs:{href:"http://csswizardry.com/2014/07/hacks-for-dealing-with-specificity/",target:"_blank",rel:"noopener noreferrer"}},[e._v("CSS Wizardry's article"),a("OutboundLink")],1),e._v(" on dealing with specificity.")]),e._v(" "),a("h3",{attrs:{id:"-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#-6"}},[e._v("#")])]),e._v(" "),a("h3",{attrs:{id:"javascript-hooks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript-hooks"}},[e._v("#")]),e._v(" JavaScript hooks")]),e._v(" "),a("p",[e._v("Avoid binding to the same class in both your CSS and JavaScript.  Conflating the two often leads to, at a minimum, time wasted during  refactoring when a developer must cross-reference each class they are  changing, and at its worst, developers being afraid to make changes for  fear of breaking functionality.")]),e._v(" "),a("p",[e._v("We recommend creating JavaScript-specific classes to bind to, prefixed with "),a("code",[e._v(".js-")]),e._v(":")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<button class="btn btn-primary js-request-to-book">Request to Book</button>\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("h3",{attrs:{id:"-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#-7"}},[e._v("#")])]),e._v(" "),a("h3",{attrs:{id:"border"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#border"}},[e._v("#")]),e._v(" Border")]),e._v(" "),a("p",[e._v("Use "),a("code",[e._v("0")]),e._v(" instead of "),a("code",[e._v("none")]),e._v(" to specify that a style has no border.")]),e._v(" "),a("p",[a("strong",[e._v("Bad")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(".foo {\n  border: none;\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("p",[a("strong",[e._v("Good")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(".foo {\n  border: 0;\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("p",[e._v("​")]),e._v(" "),a("h2",{attrs:{id:"sass"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sass"}},[e._v("#")]),e._v(" Sass")]),e._v(" "),a("h3",{attrs:{id:"-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#-8"}},[e._v("#")])]),e._v(" "),a("h3",{attrs:{id:"syntax"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#syntax"}},[e._v("#")]),e._v(" Syntax")]),e._v(" "),a("ul",[a("li",[e._v("Use the "),a("code",[e._v(".scss")]),e._v(" syntax, never the original "),a("code",[e._v(".sass")]),e._v(" syntax")]),e._v(" "),a("li",[e._v("Order your regular CSS and "),a("code",[e._v("@include")]),e._v(" declarations logically (see below)")])]),e._v(" "),a("h3",{attrs:{id:"-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#-9"}},[e._v("#")])]),e._v(" "),a("h3",{attrs:{id:"ordering-of-property-declarations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ordering-of-property-declarations"}},[e._v("#")]),e._v(" Ordering of property declarations")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("Property declarations")]),e._v(" "),a("p",[e._v("List all standard property declarations, anything that isn't an "),a("code",[e._v("@include")]),e._v(" or a nested selector.")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(".btn-green {\n  background: green;\n  font-weight: bold;\n  // ...\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])])]),e._v(" "),a("li",[a("p",[a("code",[e._v("@include")]),e._v(" declarations")]),e._v(" "),a("p",[e._v("Grouping "),a("code",[e._v("@include")]),e._v("s at the end makes it easier to read the entire selector.")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(".btn-green {\n  background: green;\n  font-weight: bold;\n  @include transition(background 0.5s ease);\n  // ...\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br")])])]),e._v(" "),a("li",[a("p",[e._v("Nested selectors")]),e._v(" "),a("p",[e._v("Nested selectors, "),a("em",[e._v("if necessary")]),e._v(", go last, and nothing goes  after them. Add whitespace between your rule declarations and nested  selectors, as well as between adjacent nested selectors. Apply the same  guidelines as above to your nested selectors.")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(".btn {\n  background: green;\n  font-weight: bold;\n  @include transition(background 0.5s ease);\n\n  .icon {\n    margin-right: 10px;\n  }\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br")])])])]),e._v(" "),a("h3",{attrs:{id:"-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#-10"}},[e._v("#")])]),e._v(" "),a("h3",{attrs:{id:"variables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#variables"}},[e._v("#")]),e._v(" Variables")]),e._v(" "),a("p",[e._v("Prefer dash-cased variable names (e.g. "),a("code",[e._v("$my-variable")]),e._v(")  over camelCased or snake_cased variable names. It is acceptable to  prefix variable names that are intended to be used only within the same  file with an underscore (e.g. "),a("code",[e._v("$_my-variable")]),e._v(").")]),e._v(" "),a("h3",{attrs:{id:"-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#-11"}},[e._v("#")])]),e._v(" "),a("h3",{attrs:{id:"mixins"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mixins"}},[e._v("#")]),e._v(" Mixins")]),e._v(" "),a("p",[e._v("Mixins should be used to DRY up your code, add clarity, or abstract  complexity--in much the same way as well-named functions. Mixins that  accept no arguments can be useful for this, but note that if you are not compressing your payload (e.g. gzip), this may contribute to  unnecessary code duplication in the resulting styles.")]),e._v(" "),a("h3",{attrs:{id:"-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#-12"}},[e._v("#")])]),e._v(" "),a("h3",{attrs:{id:"extend-directive"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#extend-directive"}},[e._v("#")]),e._v(" Extend directive")]),e._v(" "),a("p",[a("code",[e._v("@extend")]),e._v(" should be avoided because it has unintuitive and potentially dangerous behavior, especially when used with nested  selectors. Even extending top-level placeholder selectors can cause  problems if the order of selectors ends up changing later (e.g. if they  are in other files and the order the files are loaded shifts). Gzipping  should handle most of the savings you would have gained by using "),a("code",[e._v("@extend")]),e._v(", and you can DRY up your stylesheets nicely with mixins.")]),e._v(" "),a("h3",{attrs:{id:"-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#-13"}},[e._v("#")])]),e._v(" "),a("h3",{attrs:{id:"nested-selectors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nested-selectors"}},[e._v("#")]),e._v(" Nested selectors")]),e._v(" "),a("p",[a("strong",[e._v("Do not nest selectors more than three levels deep!")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(".page-container {\n  .content {\n    .profile {\n      // STOP!\n    }\n  }\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br")])]),a("p",[e._v("When selectors become this long, you're likely writing CSS that is:")]),e._v(" "),a("ul",[a("li",[e._v("Strongly coupled to the HTML (fragile) "),a("em",[e._v("—OR—")])]),e._v(" "),a("li",[e._v("Overly specific (powerful) "),a("em",[e._v("—OR—")])]),e._v(" "),a("li",[e._v("Not reusable")])]),e._v(" "),a("p",[e._v("Again: "),a("strong",[e._v("never nest ID selectors!")])]),e._v(" "),a("p",[e._v("If you must use an ID selector in the first place (and you should  really try not to), they should never be nested. If you find yourself  doing this, you need to revisit your markup, or figure out why such  strong specificity is needed. If you are writing well formed HTML and  CSS, you should "),a("strong",[e._v("never")]),e._v(" need to do this.")])])}),[],!1,null,null,null);s.default=n.exports}}]);